/// <reference path="../../node_modules/monaco-editor/monaco.d.ts" />
import { parseTemplate, walkSync } from './library';
const fs = require('fs-extra');
const path = require('path');

import IRichLanguageConfiguration = monaco.languages.LanguageConfiguration;
import ILanguage = monaco.languages.IMonarchLanguage;

export const conf: IRichLanguageConfiguration = {
    comments: {
        lineComment: '//',
        blockComment: ['/*', '*/'],
    },
    brackets: [
        ['({', '})'],
        ['([', '])'],
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    autoClosingPairs: [
        { open: '([', close: '])' },
        { open: '({', close: '})' },
        { open: '[', close: ']' },
        { open: '{', close: '}' },
        { open: '(', close: ')' },
        { open: '\'', close: '\'', notIn: ['string', 'comment'] },
        { open: '"', close: '"', notIn: ['string'] },
    ],
    surroundingPairs: [
        { open: '({', close: '})' },
        { open: '([', close: '])' },
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: '\'', close: '\'' },
    ],
    folding: {
        markers: {
            start: new RegExp("^\\s*//\\s+[rR]egion\\b"),
            end: new RegExp("^\\s*//\\s+[eE]nd[rR]egion\\b")
        }
    }
};

export const language = <ILanguage>{
    defaultToken: '',
    tokenPostfix: '.c',

    brackets: [
        { token: 'delimiter.array', open: '({', close: '})' },
        { token: 'delimiter.mapping', open: '([', close: '])' },
        { token: 'delimiter.curly', open: '{', close: '}' },
        { token: 'delimiter.parenthesis', open: '(', close: ')' },
        { token: 'delimiter.square', open: '[', close: ']' },
        { token: 'delimiter.angle', open: '<', close: '>' }
    ],

    keywords: [
        'break',
        'case',
        'catch',
        'class',
        'const',
        'continue',
        'default',
        'do',
        'foreach',
        'else',
        'finally',
        'for',
        'goto',
        'if',
        'in',
        'undefined',
        'private',
        'protected',
        'public',
        'return',
        'static',
        'struct',
        'switch',
        'this',
        'try',
        'virtual',
        'while',
        'nosave',
        'varrags',
        'nomask',
        'inherit',

    ],
    datatypes: [
        'void',
        'float',
        'int',
        'object',
        'function',
        'mapping',
        'string',
        'mixed',
        'object *',
        'function *',
        'float *',
        'mapping *',
        'string *',
        'int *',
        'mixed *',
        'object*',
        'function*',
        'float*',
        'mapping*',
        'string*',
        'int*',
        'mixed*',
        'buffer',
    ],

    const: [
        'MUDOS',
        '__PORT__',
        '__ARCH__',
        '__COMPILER__',
        '__OPTIMIZATION__',
        'MUD_NAME',
        'HAS_ED',
        'HAS_PRINTF',
        'HAS_RUSAGE',
        'HAS_DEBUG_LEVEL',
        '__DIR__',
        'FLUFFOS',
        '__WIN32__',
        '__HAS_RUSAGE__',
        '__M64__',
        '__PACKAGE_DB__',
        '__GET_CHAR_IS_BUFFERED__',
        '__DSLIB__',
        '__DWLIB__',
        '__FD_SETSIZE__',
        '__VERSION__',
        '__DEBUG__',
        'SIZEOFINT',
        'MAX_INT',
        'MIN_INT',
        'MAX_FLOAT',
        'MIN_FLOAT'
    ],

    efuns: [
        'allocate',
        'filter_array',
        'map_array',
        'member_array',
        'sort_array',
        'unique_array',
        'allocate_buffer',
        'crc32',
        'read_buffer',
        'write_buffer',
        'call_other',
        'call_out',
        'catch',
        'origin',
        'previous_object',
        'query_shadowing',
        'remove_call_out',
        'shadow',
        'this_object',
        'throw',
        'generate_source',
        'ed_cmd',
        'ed_start',
        'query_ed_mode',
        'cp',
        'file_size',
        'get_dir',
        'link',
        'mkdir',
        'read_bytes',
        'read_file',
        'rename',
        'rm',
        'rmdir',
        'stat',
        'tail',
        'write_bytes',
        'write_file',
        'acos',
        'asin',
        'atan',
        'ceil',
        'cos',
        'exp',
        'floor',
        'log',
        'pow',
        'sin',
        'sqrt',
        'tan',
        'to_int',
        'apply',
        'bind',
        'evaluate',
        'map',
        'restore_variable',
        'save_variable',
        'sizeof',
        'typeof',
        'add_action',
        'command',
        'commands',
        'disable_commands',
        'disable_wizard',
        'ed',
        'enable_commands',
        'exec',
        'find_player',
        'get_char',
        'in_edit',
        'in_input',
        'input_to',
        'interactive',
        'message',
        'notify_fail',
        'printf',
        'query_host_name',
        'query_idle',
        'query_ip_name',
        'query_ip_number',
        'query_snoop',
        'query_snooping',
        'receive',
        'remove_action',
        'resolve',
        'say',
        'set_this_player',
        'shout',
        'snoop',
        'this_interactive',
        'this_player',
        'userp',
        'users',
        'write',
        'cache_stats',
        'debug_info',
        'debugmalloc',
        'dump_file_descriptors',
        'dump_prog',
        'dump_socket_status',
        'dumpallobj',
        'get_config',
        'malloc_status',
        'memory_info',
        'moncontrol',
        'mud_status',
        'opcprof',
        'query_load_average',
        'refs',
        'rusage',
        'set_debug_level',
        'set_malloc_mask',
        'swap',
        'time_expression',
        'trace',
        'traceprefix',
        'allocate_mapping',
        'each',
        'filter_mapping',
        'keys',
        'map_delete',
        'map_mapping',
        'match_path',
        'unique_mapping',
        'values',
        'author_stats',
        'domain_stats',
        'enable_wizard',
        'export_uid',
        'find_living',
        'geteuid',
        'getuid',
        'living',
        'livings',
        'query_privs',
        'set_author',
        'set_light',
        'set_living_name',
        'set_privs',
        'seteuid',
        'wizardp',
        'random',
        'to_float',
        'all_inventory',
        'children',
        'clone_object',
        'clonep',
        'deep_inventory',
        'destruct',
        'environment',
        'file_name',
        'first_inventory',
        'load_object',
        'master',
        'move_object',
        'new',
        'next_inventory',
        'objects',
        'present',
        'query_heart_beat',
        'reload_object',
        'restore_object',
        'save_object',
        'set_heart_beat',
        'set_hide',
        'virtualp',
        'parse_command',
        'process_string',
        'process_value',
        'query_verb',
        'socket_accept',
        'socket_acquire',
        'socket_address',
        'socket_bind',
        'socket_close',
        'socket_connect',
        'socket_create',
        'socket_error',
        'socket_listen',
        'socket_release',
        'socket_write',
        'break_string',
        'capitalize',
        'clear_bit',
        'crypt',
        'explode',
        'implode',
        'lower_case',
        'upper_case',
        'reg_assoc',
        'regexp',
        'replace_string',
        'set_bit',
        'sprintf',
        'sscanf',
        'strcmp',
        'stringp',
        'strlen',
        'strsrch',
        'test_bit',
        'all_previous_objects',
        'call_out_info',
        'ctime',
        'deep_inherit_list',
        'error',
        'eval_cost',
        'find_call_out',
        'function_exists',
        'function_profile',
        'inherit_list',
        'inherits',
        'localtime',
        'max_eval_cost',
        'reclaim_objects',
        'replace_program',
        'reset_eval_cost',
        'set_eval_limit',
        'set_reset',
        'shutdown',
        'time',
        'uptime',
        'find_object',
        'functionp',
        'intp',
        'arrayp',
        'stringp',
        'pointerp',
        'objectp',
        'bufferp',
        'floatp',
        'nullp',
        'undefinedp',
        'errorp',
        'mapp'
    ],

    sefuns: [
        'year',
        'wrap',
        'wizardp',
        'visible',
        'version',
        'user_path',
        'user_exists',
        'unguarded',
        'unescape_string',
        'undefined',
        'translate_lines',
        'translate_file',
        'translate_block',
        'translate',
        'to_object',
        'textencode',
        'textdecode',
        'trim',
        'ltrim',
        'rtrim',
        'reverse_string',
        'starts_with',
        'ends_with',
        'tell_room',
        'tell_player',
        'tell_object',
        'syntax_evaluate',
        'syntax_compile',
        'substr',
        'strip_whitespace',
        'strip_leading_trailing',
        'strip_colours',
        'strip_colors',
        'color_gradient',
        'stack_size',
        'stack_push',
        'stack_pop',
        'stack_peek',
        'stack_init',
        'simple_tense',
        'item_list',
        'shout_msg',
        'shout_all',
        'shout',
        'sexplode',
        'season',
        'say',
        'save_database',
        'round',
        'rexplode',
        'render_columns',
        'remove_item_from_array',
        'remove_element_from_array',
        'read_database',
        'random_member',
        'query_path',
        'query_opposite_exit',
        'query_night',
        'query_host_port',
        'present_tense',
        'present_clones_children',
        'present_clones',
        'possessive_noun',
        'pluralize',
        'pick_elements',
        'percent',
        'path_file',
        'past_tense',
        'parse_objects',
        'parse_eini_tree',
        'parse_eini',
        'owner_euid',
        'ordinal_num',
        'ordinal',
        'newbiep',
        'mumudlib_version',
        'mud_name',
        'mud_currencies',
        'month',
        'mkdir_p',
        'minutes',
        'midp',
        'member_group',
        'logins',
        'log_file',
        'load_object',
        'load_database',
        'legendp',
        'iso_date_time',
        'iso_date',
        'instances',
        'inWater',
        'immortalp',
        'identify',
        'hour',
        'high_mortalp',
        'hiddenp',
        'get_objects',
        'get_object',
        'format_string',
        'format_stack',
        'format_page',
        'format_as_columns',
        'find_object_or_load',
        'file_exists',
        'expand_exit',
        'exclude_array',
        'event_pending',
        'event_log',
        'event',
        'elderp',
        'editor_string',
        'dump_socket_status',
        'distinct_array',
        'distance',
        'deep_copy',
        'day',
        'date',
        'database_filter',
        'cut_spaces',
        'currency_weight',
        'currency_value',
        'currency_rate',
        'currency_inflation',
        'creatorp',
        'creator_file',
        'copy',
        'convert_name',
        'consolidate',
        'comma_number',
        'comma_list',
        'consolidate_list',
        'combinations',
        'clone_unique',
        'clone_max_children',
        'clone_max',
        'clone',
        'check_password',
        'center',
        'cardinal',
        'capwords',
        'bf_set',
        'bf_query',
        'bf_new',
        'bf_dump',
        'bf_count',
        'bf_clear',
        'bf_assoc',
        'base_name',
        'avg',
        'atoi',
        'arrange_string',
        'archp',
        'architecture',
        'alphabet',
        'all_users',
        'all_plurals',
        'all_combinations',
        'adminp',
        'add_vector',
        'abs',
        'a_or_an',
        'string_parts',
        'clower_case',
        'cupper_case',
        'sound',
        'music',
        'apprenticep',
        'tztime',
        'fansi',
        'query_host_ip',
        'color_rainbow',
        'base64_encode',
        'base64_decode',
        'mudlib',
        'mudlib_version',
        'absolute_path',
        'absolute_value',
        'create_auto_load',
        'save_auto_load',
        'find_room'
    ],

    abbr: [
        'FOOL',
        'TP',
        'TO',
        'ENVTP',
        'HIS',
        'HE',
        'HIM',
        'QP',
        'QS',
        'QO',
        'SJ',
        'OJ',
        'PS',
        'TPQCN',
        'TPQN',
        'PO',
        'ETP',
        'ETO',
        'ENVTO',
        'QCN',
        'QN'
    ],

    applies: [
        'catch_tell',
        'logon',
        'net_dead',
        'process_input',
        'receive_message',
        'receive_snoop',
        'telnet_suboption',
        'terminal_type',
        'write_prompt',
        //master
        'author_file',
        'compile_object',
        'connect',
        'crash',
        'creator_file',
        'domain_file',
        'epilog',
        'error_handler',
        'flag',
        'get_bb_uid',
        'get_include_path',
        'get_mud_stats',
        'get_root_uid',
        'get_save_file_name',
        'log_error',
        'make_path_absolute',
        'object_name',
        'preload',
        'privs_file',
        'retrieve_ed_setup',
        'save_ed_setup',
        'valid_bind',
        'valid_database',
        'valid_hide',
        'valid_link',
        'valid_object',
        'valid_override',
        'valid_read',
        'valid_save_binary',
        'valid_seteuid',
        'valid_shadow',
        'valid_socket',
        'valid_write',
        'view_errors',
        //master end
        'clean_up',
        'create',
        'id',
        'init',
        'move_or_destruct',
        'reset',
        'heart_beat'
    ],

    operators: [
        '=', '>', '<', '!', '~', '?', ':',
        '==', '<=', '>=', '!=', '&&', '||', '++', '--',
        '+', '-', '*', '/', '&', '|', '^', '%', '<<',
        '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',
        '^=', '%=', '<<=', '>>=', '>>>=', '->', '::'
    ],

    // we include these common regular expressions
    symbols: /[=><!~?:&|+\-*\/\^%]+/,
    escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
    loatsuffix: /[fFlL]?/,
    integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,
    floatsuffix: /[fFlL]?/,

    // The main tokenizer for our languages
    tokenizer: {
        root: [
            //inherits
            [/(\s*)(\w*)(::)(\w+)(\()/, ['', 'parent', 'delimiter', 'parent.function', { token: 'delimiter.parenthesis', open: '(', close: ')' }], '@brackets'],

            // identifiers and keywords
            [/[a-zA-Z_]\w*/, {
                cases: {
                    '@keywords': { token: 'keyword.$0' },
                    '@datatypes': { token: 'datatype' },
                    '@sefuns': { token: 'sefuns' },
                    '@efuns': { token: 'efuns' },
                    '@abbr': { token: 'abbr' },
                    '@const': { token: 'constant' },
                    '@applies': { token: 'applies' },
                    '@default': 'identifier'
                }
            }],

            // whitespace
            { include: '@whitespace' },

            [/^\s*#include/, { token: 'keyword.directive.include', next: '@include' }],

            // Preprocessor directive
            [/^\s*#\s*\w+/, 'keyword.directive'],

            // delimiters and operators
            [/[{}()\[\]]/, '@brackets'],
            [/[<>](?!@symbols)/, '@brackets'],
            [/@symbols/, {
                cases: {
                    '@operators': 'delimiter',
                    '@default': ''
                }
            }],

            // numbers
            [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
            [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
            [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],
            [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],
            [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],
            [/\d[\d']*\d(@integersuffix)/, 'number'],
            [/\d(@integersuffix)/, 'number'],

            // delimiter: after number because of .\d floats
            [/[;,.]/, 'delimiter'],

            // strings
            [/"([^"\\]|\\.)*$/, 'string.invalid'],  // non-teminated string
            [/"/, 'string', '@string'],

            // characters
            [/'[^\\']'/, 'string'],
            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
            [/'/, 'string.invalid']
        ],

        whitespace: [
            [/[ \t\r\n]+/, ''],
            [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
            [/\/\*/, 'comment', '@comment'],
            [/\/\/.*$/, 'comment'],
        ],

        comment: [
            [/[^\/*]+/, 'comment'],
            [/\*\//, 'comment', '@pop'],
            [/[\/*]/, 'comment']
        ],
        //Identical copy of comment above, except for the addition of .doc
        doccomment: [
            [/[^\/*]+/, 'comment.doc'],
            [/\*\//, 'comment.doc', '@pop'],
            [/[\/*]/, 'comment.doc']
        ],

        string: [
            [/[^\\"]+/, 'string'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            [/"/, 'string', '@pop']
        ],

        include: [
            [/(\s*)(<)([^<>]*)(>)/, ['', 'keyword.directive.include.begin', 'string.include.identifier', { token: 'keyword.directive.include.end', next: '@pop' }]],
            [/(\s*)(")([^"]*)(")/, ['', 'keyword.directive.include.begin', 'string.include.identifier', { token: 'keyword.directive.include.end', next: '@pop' }]]
        ]
    },
};

export function loadCompletion(): monaco.languages.CompletionItem[] {
    let list: monaco.languages.CompletionItem[] = [
        {
            label: 'void create',
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertText: 'void create() {\n   ::create();\n}'
        },
        {
            label: 'void init',
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertText: 'void init() {\n   ::init();\n}'
        },
        {
            label: 'void reset',
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertText: 'void reset() {\n   ::reset();\n}'
        },
    ];
    const p = parseTemplate(path.join('{assets}', 'editor', 'docs'));
    list = list.concat(getCompletionFromPath(path.join(p, 'applies', 'interactive'), monaco.languages.CompletionItemKind.Interface));
    list = list.concat(getCompletionFromPath(path.join(p, 'applies', 'object'), monaco.languages.CompletionItemKind.Interface));
    list = list.concat(getCompletionFromPath(path.join(p, 'constants'), monaco.languages.CompletionItemKind.Variable));
    list = list.concat(getCompletionFromPath(path.join(p, 'efuns'), monaco.languages.CompletionItemKind.Function));
    list = list.concat(getCompletionFromPath(path.join(p, 'sefuns'), monaco.languages.CompletionItemKind.Class));
    return list;
}

function getCompletionFromPath(p, kind?: monaco.languages.CompletionItemKind): monaco.languages.CompletionItem[] {
    let list = [];
    let files = walkSync(p);
    let l = files.files.length;
    var f = 0;
    for (; f < l; f++) {
        list.push(
            {
                label: path.basename(files.files[f], path.extname(files.files[f])),
                kind: kind
            }
        )
    }
    return list;
}