"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const EventEmitter=require("events"),library_1=require("./library"),fs=require("fs"),path=require("path");class Logger extends EventEmitter{constructor(a){if(super(),this.client=null,this._path="",this.timeStamp=0,this.currentfile="",this.logging=!1,this._name="",!a)throw"Invalid client!";this.client=a,this._path=library_1.parseTemplate(this.client.options.logPath),fs.existsSync(this._path)||fs.mkdirSync(this._path),this.client.on("optionsLoaded",()=>{var b=library_1.parseTemplate(this.client.options.logPath);b!=this._path&&(this._path=b,!fs.existsSync(this._path)&&fs.mkdirSync(this._path),this.logging&&this.fileChanged())}),this.client.on("closed",()=>{this.client.options.logOffline||this.stop()}),this.client.on("connected",()=>{this.start()}),this.client.on("parseDone",(b)=>{this.writeLines(b)}),this.client.options.logOffline&&this.start()}get name(){return this._name}set name(a){this._name=a,this.logging&&this.fileChanged()}fileChanged(){var a=path.join(this._path,this.timeStamp.toString())+".htm";this.buildFilename(),fs.existsSync(a)&&a!=this.currentfile&&fs.renameSync(a,this.currentfile),this.client.enableDebug&&this.client.emit("debug","File changed: \""+a+"\" to \""+this.currentfile+"\"")}buildFilename(){this.currentfile=this.timeStamp.toString(),this._name&&0<this._name.length&&(this.currentfile+="."+this._name),this.currentfile=path.join(this._path,this.currentfile)+".htm",this.client.enableDebug&&this.client.emit("debug","Log file: \""+this.currentfile+"\"")}writeHeader(){this.buildFilename();fs.existsSync(this.currentfile)||fs.appendFile(this.currentfile,"<head>\n<style>\nbody\n{\n\tfont-family: Inconsolata, 'Courier New', Courier, monospace;\n\ttext-align: left;\n\tfont-size: 1em;\n\twhite-space: pre;\n\tbackground-color: black;\t\n}\n/* --- Start CSS for ansi display --- */\n@-webkit-keyframes blinker { \n \t0% { opacity: 1.0; }\n  50% { opacity: 0.0; }\n  100% { opacity: 1.0; }\n} \n\n@keyframes blinker { \n \t0% { opacity: 1.0; }\n  50% { opacity: 0.0; }\n  100% { opacity: 1.0; }\n} \n\n.ansi-blink { \n\ttext-decoration:blink;\n\tanimation-name: blinker;\n\tanimation-iteration-count: infinite; \n\tanimation-timing-function: cubic-bezier(1.0,0,0,1.0); \n\tanimation-duration: 1s; \n\t-webkit-animation-name: blinker;\n\t-webkit-animation-iteration-count: infinite; \n\t-webkit-animation-timing-function: cubic-bezier(1.0,0,0,1.0); \n\t-webkit-animation-duration: 1s; \n}\n\n.ansi\n{\n\tpadding: 0px;\n\tmargin:0px;\n\t\n}\n\n.line \n{\n\tword-wrap:break-word;\n\tword-break:break-all;\n\twidth: 100%;\n\tdisplay: block;\n\tpadding-bottom:1px;\n\tclear:both;\n\tline-height: normal;\n}\t\n\n.line hr{ border: 0px; }\n/* --- End CSS for ansi display --- */\n\n.line a, .line a:link \n{\n\tcolor: inherit;\n\tfont-weight: inherit;\n\ttext-decoration: underline;\n}\n\n.URLLink, .URLLink:link\n{\n\ttext-decoration: underline;\n\tcursor: pointer;\n}\n</style>\n",(a)=>{if(a)throw a})}write(a){this.logging&&(this.client.options.logOffline||this.client.connected)&&(this.writeHeader(),fs.appendFile(this.currentfile,a,(b)=>{if(b)throw b}))}writeLines(a){this.write(a.join(""))}start(){this.client.options.logEnabled&&(this.logging=!0,(this.client.options.logUniqueOnConnect||0===this.timeStamp)&&(this.timeStamp=new Date().getTime()),this.buildFilename(),this.client.options.logPrepend&&this.write(this.client.display.html()),this.emit("started"))}stop(){this.logging=!1,this.emit("stopped")}toggle(){this.client.options.logEnabled=!this.client.options.logEnabled,this.client.saveOptions();var a=this.client.options.logUniqueOnConnect;this.client.options.logUniqueOnConnect=!1,this.client.options.logEnabled&&!this.logging?this.start():!this.client.options.logEnabled&&this.logging&&this.stop(),this.client.options.logUniqueOnConnect=a}}exports.Logger=Logger;